package android.example.djlee.dragonmoving;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.util.AttributeSet;
import android.view.Display;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.view.WindowManager;

public class MyDragon extends SurfaceView implements Callback {
	SurfaceHolder mHolder;
	GameThread gThread;
	public MyDragon(Context context) {
		super(context);
		mHolder = this.getHolder();//SurfaceHolder생성
		mHolder.addCallback(this);//콜 백 메서드 설정
//		mHolder = holder;//콜 백 메서드가 설정된 SurfaceHolder를 mHolder로 복사
		gThread = new GameThread(mHolder, context);//스레드 생성
		gThread.setDaemon(true);//스레드를 데몬스레드로 만듬
		setFocusable(true);//생성된 뷰로 포커스를 이동
	}
	
	class GameThread extends Thread{
		SurfaceHolder mHolder;
		int width,height; int x,y,dw,dh; int sx,sy;int num;
		Bitmap imgBack;//배경 이미지
		Bitmap[] dragons = new Bitmap[2];
		GameThread(SurfaceHolder holder,Context context){
			mHolder = holder;
			Display display=((WindowManager)context.getSystemService(
					Context.WINDOW_SERVICE)).getDefaultDisplay();
			width = display.getWidth();height = display.getHeight();
			//배경이미지를 화면에 맞게 늘리거나 줄임
			imgBack=BitmapFactory.decodeResource(getResources(), 
					R.drawable.back_1);
			imgBack=Bitmap.createScaledBitmap(imgBack, 
					width, height, false);
			dragons[0]=BitmapFactory.decodeResource(getResources(), 
					R.drawable.dragon);
			dw = dragons[0].getWidth() /2;
			dh = dragons[0].getHeight() / 2;
			Matrix matrix = new Matrix();//이미지를 뒤집기 위해 Matrix생성
			matrix.postScale(-1, 1);//x방향으로 뒤집는다.
			dragons[1]=Bitmap.createBitmap(dragons[0],0,0,
					dw*2, dh*2, matrix, false);//x방향으로 뒤집힌 이미지 생성
			num = 0;//이미지 번호
			sx = 3; sy = 3;//드래곤의 이동 방향(우 하)
			x = y = 100;//드래곤의 초기 좌표
		}
		public void moveDragon(){
			x = x +sx; y = y + sy;
			if(x <= dw){
				x = dw; sx = -sx; num = 1 - num;
			}
			if(x >= width - dw){
				x = width - dw; sx = -sx; num = 1 - num;
			}
			if(y <= dh){
				y = dh; sy = -sy;
			}
			if(y >= height - dh){
				y = height - dh; sy = -sy;
			}
		}
		public void run() {
			Canvas canvas = null;
			while(true){
				canvas = mHolder.lockCanvas();
				//canvas를 가져오면서, 다른 스레드가 접근 못하도록 lock을 건다.
				try{
					synchronized(mHolder){//SurfaceHolder를 동기화
						moveDragon();
						canvas.drawBitmap(imgBack,0,0,null);
						canvas.drawBitmap(dragons[num], 
							x - dw, y - dh, null);
					}
				}finally{
					if(canvas != null){
						mHolder.unlockCanvasAndPost(canvas);
						//canvas의 lock을 해제한다.
					}
				}
			}
		}
	}
	public void surfaceCreated(SurfaceHolder holder) {
		gThread.start();//스레드 실행
	}//SurfacView가 생성될 때 자동으로 실행됨
	public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {

	}
	public void surfaceDestroyed(SurfaceHolder holder) {
		boolean done = true;
		while(done){
			try{
				gThread.join();//스레드가 종료될 때까지 대기
				done = false;
			}catch(Exception e){}
		}
	}//SurfaceView가 해제될 때 자동으로 실행됨
}











